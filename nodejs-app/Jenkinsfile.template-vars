pipeline {
  agent none
  options { 
    buildDiscarder(logRotator(numToKeepStr: '2'))
    skipDefaultCheckout true
    preserveStashes(buildCount: 2)
  }
  stages {
    stage('Test') {
      agent {
        kubernetes {
          label 'nodejs-app-inline'
          yaml """
kind: Pod
metadata:
  name: nodejs-app
spec:
  containers:
  - name: nodejs
    image: node:10.9.0-alpine
    command:
    - cat
    tty: true
  - name: testcafe-chrome
    image: testcafe/testcafe
    command:
    - cat
    tty: true
  - name: testcafe-firefox
    image: testcafe/testcafe
    command:
    - cat
    tty: true
    ports:
    - name: firefox1
      containerPort: 1339
    - name: firefox2
      containerPort: 1340
          """
        }
      }
      stages {
        stage('App Setup') {
          steps {
            checkout scm
            script {
              //define default values that may be overridden via the .nodejs-app file
              def d = [npmPackages: 'express pug']
              //use the Pipeline Utility Steps plugin readProperties step to read the .nodejs-app custom marker file 
              def props = readProperties defaults: d, file: '.nodejs-app'
              env.npmPackages = props['npmPackages']
            }
            container('nodejs') {
              sh '''
                npm i -S ${npmPackages}
                node ./hello.js &
              '''
            }
          }
        }
      }
      post {
        success {
          stash name: 'app', includes: '*.js, public/**, views/*, Dockerfile'
        }
        always {
          junit 'res*.xml'
        }
      }    
    }
    stage('Build and Deploy') {
      when {
        beforeAgent true
        branch 'master'
      }  
      stages {
        stage('Build and Push Image') {
          agent any
          steps {
            echo "TODO - build and push image"
            unstash 'app'
          }
        }
        stage('Deploy') {
          options {
            timeout(time: 60, unit: 'SECONDS') 
          }
          input {
            message "Should we deploy?"
            submitterParameter "APPROVER"
          }
          steps {
            echo "Continuing with deployment - approved by ${APPROVER}"
          }
        }
      }
    }
  }
}
